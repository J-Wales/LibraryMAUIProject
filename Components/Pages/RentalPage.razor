@using MySqlConnector; <!-- Importing MySqlConnector for database access -->
<!-- Declaring the route for this page -->
@page "/rental" 
<h3>Rental</h3> <!-- Displaying a heading for the Rental page -->

<div>
    <p>Welcome, @currentUser.Name!</p> <!-- Displaying a welcome message with the user's name -->
</div>


<!-- Checking if books are still loading -->
@if (rentedBooks == null) 
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- Displaying the table of books -->
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Author</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in rentedBooks)
            {
                <!-- Iterating over the list of books -->
                <tr>
                    <td>@book.bookID</td> <!-- Displaying book ID -->
                    <td>@book.Title</td> <!-- Displaying book title -->
                    <td>@book.Author</td> <!-- Displaying book author -->
                    <button class="btn btn-primary" type="button" @onclick="() => Return(book)">Return</button> <!-- Button to return the book -->
                </tr>
            }
        </tbody>
    </table>
}

@code {
    User currentUser = LogIn.user; // Gets the current user from the LogIn page

    int rID;// Declares the variable to store the rental ID

    public static List<Book> rentedBooks = new List<Book>(); // Declaring the list to store the books

    sqlHandler handler = new sqlHandler(); // creating an instance of sqlHandler class for database access

    protected override void OnInitialized() // Method called when the component is initialized
    {
        rentedBooks.Clear();
        foreach (var rental in handler.rentals) // loops through rentals
        {
            if (rental.UserID == currentUser.UserID) //finding the rental id for the current user
            {
                rID = rental.RentalID;
            }
        }

        foreach (var rentalbook in handler.rentalbooks) // looping through rental books
        {
            if (rentalbook.rentalID == rID) // matching rental ID
            {
                foreach (var book in handler.books) // Looping through books
                {
                    if (book.bookID == rentalbook.bookID) // finding books associated with rental
                    {
                        rentedBooks.Add(book); // adding books to list
                    }
                }
            }
        }

    }

    public void Return(Book book) // method to return books
    {
        foreach (var rbook in handler.rentalbooks) // looping through rented books
        {
            if (rbook.rentalID == rID && rbook.bookID == book.bookID) // matching rental book to remove
            {
                rbook.Remove(); // removing rental book
            }
        }
        book.Available = 1; // marking book available
        book.Update(); // updating book
        rentedBooks.Remove(book); // removing book from list
    }
}
