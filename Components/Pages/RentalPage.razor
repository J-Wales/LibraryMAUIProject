@using MySqlConnector; <!-- Importing the MySqlConnector namespace for database access -->
@page "/rental" <!-- Declaring the name/route for this page -->
<h3>Rental</h3>

<div>
	<p>Welcome, @currentUser.Name!</p> <!-- Displays the current user and a welcome message -->
</div>


@if (books == null) <!-- Checks if the books list is still loading -->
{
    <p><em>Loading...</em></p>
}
else <!-- Displays the table of books -->
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Author</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books) <!-- Iterating over the list of  books -->
            {
                <tr>
                    <td>@book.bookID</td> <!-- Displays the books ID -->
                    <td>@book.Title</td> <!-- Displays the books Title -->
                    <td>@book.Author</td> <!-- Displays the books Author -->
                    <button class="btn btn-primary" type="button" @onclick="() => Return(book)">Return</button> <!-- adds a button to return a book -->
                </tr>
            }
        </tbody>
    </table>
}

@code {
    User currentUser = LogIn.user; <!-- gets the current user from the LogIn page -->

    int rID; <!-- Declares the variable to store the rental ID -->

    List<Book> books = new List<Book>(); <!-- declaring the list to store the books -->

    sqlHandler handler = new sqlHandler(); <!-- creating an instance of sqlHandler class for databse access -->

    protected override void OnInitialized() <!-- Method called when the component is initialized -->
    {
        foreach (var rental in handler.rentals) <!-- Loops through the rentals -->
        {
            if (rental.UserID == currentUser.UserID) <!-- finding the rental ID for the current user -->
            {
                rID = rental.RentalID;
            }
        }

        foreach (var rentalbook in handler.rentalbooks) <!-- Loops through the rental books -->
        {
            if (rentalbook.rentalID == rID) <!-- checks if the rental ID matches the current rental ID -->
            {
                foreach (var book in handler.books) <!-- loops through the books -->
                {
                    if (book.bookID == rentalbook.bookID) <!-- finding the books associated with the current rental --.
                    {
                        books.Add(book); <!-- adding the book to the list of books -->
                    }
                }
            }
        }

    }

    public void Return(Book book) <!-- method to return a book -->
    {
        foreach (var rbook in handler.rentalbooks) <!-- Looping through the rental books -->
        {
            if (rbook.rentalID == rID && rbook.bookID == book.bookID) <!-- Finds the rental book to remove -->
            {
                rbook.Remove(); <!-- removes the rental book -->
            }
        }
        book.Available = 1; <!-- sets the book as available -->
        book.Update(); <!-- updating the book in the database -->
        books.Remove(book); <!-- removing the book from the list of books -->
    }
}
