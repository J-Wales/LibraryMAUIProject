@using MySqlConnector;
@page "/library" 

<h1>Books</h1>

<p>This component demonstrates showing data.</p>

@if (books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Author</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                if (book.Available == 1)
                {
                    <tr>
                        <td>@book.bookID</td>
                        <td>@book.Title</td>
                        <td>@book.Author</td>
                        <button class="btn btn-primary" type="button" @onclick="() => Rent(book)">Rent</button>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    // Initialize the SQL handler
    sqlHandler handler = new sqlHandler();

    // Declare a nullable array to store books
    public Book[]? books;

    // Get the current user from the LogIn page
    User currentUser = LogIn.user;

    // Method called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        // Load books from the handler
        books = handler.books;


    }

    // Method to rent a book
    public void Rent(Book book)
    {
        bool a = false;
        int rID = 0;

        // Check if the user has any existing rentals
        foreach (var rental in handler.rentals)
        {
            if (rental.UserID == currentUser.UserID)
            {
                a = true;
                rID = rental.RentalID;
            }
        }

        // If user has no existing rentals, generate a new rental ID
        if (a == false)
        {
            Random rnd = new Random();
            rID = rnd.Next(2000, 3000);
            while (CheckExists(rID) == true)
            {
                rID = rnd.Next(2000, 3000);
            }

        }

        // Create a new rental book and add it to the database
        RentalBook newRentalBook = new RentalBook(rID, book.bookID);

        newRentalBook.toTable();

        // Set the book as unavailable and update it in the database
        book.Available = 0;
        book.Update();
    }

    // Method to check if a rental ID already exists
    public bool CheckExists(int id)
    {
        bool exists = false;
        foreach (var rental in handler.rentals)
        {
            if (rental.RentalID == id)
            {
                exists = true;
            }
        }
        return exists;
    }
}
